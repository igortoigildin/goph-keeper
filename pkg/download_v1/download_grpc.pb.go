// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: download.proto

package download_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DownloadV1_DownloadPassword_FullMethodName = "/download_v1.DownloadV1/DownloadPassword"
	DownloadV1_DownloadText_FullMethodName     = "/download_v1.DownloadV1/DownloadText"
	DownloadV1_DownloadFile_FullMethodName     = "/download_v1.DownloadV1/DownloadFile"
	DownloadV1_DownloadBankData_FullMethodName = "/download_v1.DownloadV1/DownloadBankData"
)

// DownloadV1Client is the client API for DownloadV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloadV1Client interface {
	DownloadPassword(ctx context.Context, in *DownloadPasswordRequest, opts ...grpc.CallOption) (*DownloadPasswordResponse, error)
	DownloadText(ctx context.Context, in *DownloadTextRequest, opts ...grpc.CallOption) (*DownloadTextResponse, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error)
	DownloadBankData(ctx context.Context, in *DownloadBankDataRequest, opts ...grpc.CallOption) (*DownloadBankDataResponse, error)
}

type downloadV1Client struct {
	cc grpc.ClientConnInterface
}

func NewDownloadV1Client(cc grpc.ClientConnInterface) DownloadV1Client {
	return &downloadV1Client{cc}
}

func (c *downloadV1Client) DownloadPassword(ctx context.Context, in *DownloadPasswordRequest, opts ...grpc.CallOption) (*DownloadPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadPasswordResponse)
	err := c.cc.Invoke(ctx, DownloadV1_DownloadPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadV1Client) DownloadText(ctx context.Context, in *DownloadTextRequest, opts ...grpc.CallOption) (*DownloadTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadTextResponse)
	err := c.cc.Invoke(ctx, DownloadV1_DownloadText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadV1Client) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DownloadV1_ServiceDesc.Streams[0], DownloadV1_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadFileRequest, DownloadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DownloadV1_DownloadFileClient = grpc.ServerStreamingClient[DownloadFileResponse]

func (c *downloadV1Client) DownloadBankData(ctx context.Context, in *DownloadBankDataRequest, opts ...grpc.CallOption) (*DownloadBankDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadBankDataResponse)
	err := c.cc.Invoke(ctx, DownloadV1_DownloadBankData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadV1Server is the server API for DownloadV1 service.
// All implementations must embed UnimplementedDownloadV1Server
// for forward compatibility.
type DownloadV1Server interface {
	DownloadPassword(context.Context, *DownloadPasswordRequest) (*DownloadPasswordResponse, error)
	DownloadText(context.Context, *DownloadTextRequest) (*DownloadTextResponse, error)
	DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error
	DownloadBankData(context.Context, *DownloadBankDataRequest) (*DownloadBankDataResponse, error)
	mustEmbedUnimplementedDownloadV1Server()
}

// UnimplementedDownloadV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDownloadV1Server struct{}

func (UnimplementedDownloadV1Server) DownloadPassword(context.Context, *DownloadPasswordRequest) (*DownloadPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadPassword not implemented")
}
func (UnimplementedDownloadV1Server) DownloadText(context.Context, *DownloadTextRequest) (*DownloadTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadText not implemented")
}
func (UnimplementedDownloadV1Server) DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedDownloadV1Server) DownloadBankData(context.Context, *DownloadBankDataRequest) (*DownloadBankDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadBankData not implemented")
}
func (UnimplementedDownloadV1Server) mustEmbedUnimplementedDownloadV1Server() {}
func (UnimplementedDownloadV1Server) testEmbeddedByValue()                    {}

// UnsafeDownloadV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadV1Server will
// result in compilation errors.
type UnsafeDownloadV1Server interface {
	mustEmbedUnimplementedDownloadV1Server()
}

func RegisterDownloadV1Server(s grpc.ServiceRegistrar, srv DownloadV1Server) {
	// If the following call pancis, it indicates UnimplementedDownloadV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DownloadV1_ServiceDesc, srv)
}

func _DownloadV1_DownloadPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadV1Server).DownloadPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadV1_DownloadPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadV1Server).DownloadPassword(ctx, req.(*DownloadPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadV1_DownloadText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadV1Server).DownloadText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadV1_DownloadText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadV1Server).DownloadText(ctx, req.(*DownloadTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadV1_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DownloadV1Server).DownloadFile(m, &grpc.GenericServerStream[DownloadFileRequest, DownloadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DownloadV1_DownloadFileServer = grpc.ServerStreamingServer[DownloadFileResponse]

func _DownloadV1_DownloadBankData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadBankDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadV1Server).DownloadBankData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadV1_DownloadBankData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadV1Server).DownloadBankData(ctx, req.(*DownloadBankDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DownloadV1_ServiceDesc is the grpc.ServiceDesc for DownloadV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "download_v1.DownloadV1",
	HandlerType: (*DownloadV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadPassword",
			Handler:    _DownloadV1_DownloadPassword_Handler,
		},
		{
			MethodName: "DownloadText",
			Handler:    _DownloadV1_DownloadText_Handler,
		},
		{
			MethodName: "DownloadBankData",
			Handler:    _DownloadV1_DownloadBankData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFile",
			Handler:       _DownloadV1_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "download.proto",
}
